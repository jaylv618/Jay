<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebHID 自定义协议通信工具</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #2d388a, #4a4b8c);
            color: #f0f0f0;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            color: #fff;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.8;
        }
        
        .content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 25px;
        }
        
        @media (max-width: 768px) {
            .content {
                grid-template-columns: 1fr;
            }
        }
        
        .panel {
            background: rgba(30, 35, 80, 0.7);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .panel-title {
            display: flex;
            align-items: center;
            font-size: 1.5rem;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #4e54c8;
        }
        
        .panel-title i {
            margin-right: 10px;
            color: #6c7bff;
        }
        
        .device-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .info-item {
            background: rgba(0, 0, 0, 0.2);
            padding: 15px;
            border-radius: 10px;
        }
        
        .info-label {
            font-size: 0.9rem;
            opacity: 0.7;
            margin-bottom: 5px;
        }
        
        .info-value {
            font-size: 1.1rem;
            font-weight: 500;
            word-break: break-all;
        }
        
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 12px 24px;
            background: linear-gradient(to right, #4e54c8, #6c7bff);
            color: white;
            border: none;
            border-radius: 50px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(78, 84, 200, 0.4);
            margin: 5px;
        }
        
        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(78, 84, 200, 0.6);
        }
        
        .btn:active {
            transform: translateY(1px);
        }
        
        .btn i {
            margin-right: 8px;
        }
        
        .btn-disconnect {
            background: linear-gradient(to right, #ff416c, #ff4b2b);
        }
        
        .btn-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            margin: 20px 0;
        }
        
        .config-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        input, select, textarea {
            width: 100%;
            padding: 12px 15px;
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            background: rgba(0, 0, 0, 0.2);
            color: white;
            font-size: 1rem;
        }
        
        textarea {
            height: 150px;
            font-family: monospace;
            resize: vertical;
        }
        
        .hex-input {
            font-family: monospace;
        }
        
        .command-history {
            margin-top: 20px;
            max-height: 200px;
            overflow-y: auto;
        }
        
        .history-item {
            background: rgba(0, 0, 0, 0.2);
            padding: 10px 15px;
            border-radius: 8px;
            margin-bottom: 10px;
            font-family: monospace;
            font-size: 0.9rem;
            display: flex;
        }
        
        .history-time {
            opacity: 0.7;
            margin-right: 15px;
            min-width: 70px;
        }
        
        .history-data {
            word-break: break-all;
        }
        
        .received-data {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            padding: 15px;
            min-height: 200px;
            max-height: 300px;
            overflow-y: auto;
            font-family: monospace;
            white-space: pre-wrap;
        }
        
        .status {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            border-radius: 50px;
            background: rgba(0, 0, 0, 0.3);
            margin-top: 20px;
        }
        
        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 10px;
        }
        
        .status-connected {
            background: #4caf50;
            box-shadow: 0 0 10px #4caf50;
        }
        
        .status-disconnected {
            background: #f44336;
        }
        
        .status-pending {
            background: #ff9800;
        }
        
        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 10px;
            background: rgba(40, 40, 40, 0.9);
            color: white;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.4s ease;
            z-index: 1000;
        }
        
        .notification.show {
            transform: translateY(0);
            opacity: 1;
        }
        
        .notification-success {
            border-left: 5px solid #4caf50;
        }
        
        .notification-error {
            border-left: 5px solid #f44336;
        }
        
        .notification-warning {
            border-left: 5px solid #ff9800;
        }
        
        .footer {
            text-align: center;
            margin-top: 30px;
            padding: 20px;
            opacity: 0.7;
            font-size: 0.9rem;
        }
        
        .code-block {
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 10px;
            margin-top: 15px;
            font-family: monospace;
            font-size: 0.9rem;
            line-height: 1.4;
        }
        
        .troubleshooting {
            background: rgba(200, 50, 50, 0.2);
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
            border-left: 3px solid #ff5252;
        }
        
        .troubleshooting h3 {
            color: #ff9e9e;
            margin-bottom: 10px;
        }
        
        .troubleshooting ul {
            padding-left: 20px;
        }
        
        .troubleshooting li {
            margin-bottom: 8px;
            font-size: 0.9rem;
        }
        
        .error-details {
            background: rgba(255, 82, 82, 0.1);
            border-radius: 8px;
            padding: 10px;
            margin-top: 10px;
            font-size: 0.85rem;
        }
    </style>
    <base href="./">
</head>
<body>
    <div class="container">
        <header>
            <h1><i class="fas fa-usb"></i> WebHID 自定义协议通信工具</h1>
            <p class="subtitle">支持自定义报告格式</p>
        </header>
        
        <div class="content">
            <div class="panel">
                <h2 class="panel-title"><i class="fas fa-microchip"></i> 设备连接与控制</h2>
                
                <div class="device-info">
                    <div class="info-item">
                        <div class="info-label">连接状态</div>
                        <div class="info-value" id="connection-status">未连接</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">设备名称</div>
                        <div class="info-value" id="device-name">-</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">厂商ID (VID)</div>
                        <div class="info-value" id="vendor-id">-</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">产品ID (PID)</div>
                        <div class="info-value" id="product-id">-</div>
                    </div>
                </div>
                
                <div class="btn-container">
                    <button id="connect-btn" class="btn"><i class="fas fa-plug"></i> 连接设备</button>
                    <button id="disconnect-btn" class="btn btn-disconnect"><i class="fas fa-unplug"></i> 断开连接</button>
                    <button id="refresh-btn" class="btn"><i class="fas fa-sync-alt"></i> 刷新设备</button>
                </div>
                
                <div class="status">
                    <div class="status-dot" id="status-dot"></div>
                    <span id="status-text">准备连接设备...</span>
                </div>
            </div>
            
            <div class="panel">
                <h2 class="panel-title"><i class="fas fa-cogs"></i> 通信配置</h2>
                
                <div class="config-grid">
                    <div class="form-group">
                        <label for="report-id">报告ID</label>
                        <input type="number" id="report-id" min="0" max="255" value="1">
                    </div>
                    
                    <div class="form-group">
                        <label for="data-size">报告长度 (字节)</label>
                        <input type="number" id="data-size" min="1" max="64" value="8">
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="command-data">命令数据 (十六进制, 空格分隔)</label>
                    <input type="text" id="command-data" class="hex-input" value="AA BB CC DD EE FF 00 11">
                    <p style="font-size: 0.8rem; opacity: 0.7; margin-top: 5px;">提示：数据长度必须与报告长度一致</p>
                </div>
                
                <div class="btn-container">
                    <button id="send-btn" class="btn"><i class="fas fa-paper-plane"></i> 发送命令</button>
                    <button id="clear-btn" class="btn"><i class="fas fa-trash"></i> 清除记录</button>
                    <button id="test-btn" class="btn"><i class="fas fa-vial"></i> 测试发送</button>
                </div>
                
                <div class="command-history">
                    <h3>命令历史</h3>
                    <div id="history-container"></div>
                </div>
            </div>
            
            <div class="panel">
                <h2 class="panel-title"><i class="fas fa-code"></i> 报告描述符</h2>
                <textarea id="report-descriptor" placeholder="在此处粘贴您的报告描述符...">0x06, 0x00, 0xFF,  // Usage Page (Vendor Defined 0xFF00)
0x09, 0x01,        // Usage (Vendor 1)
0xA1, 0x01,        // Collection (Application)
0x85, 0x01,        //   Report ID (1)
0x09, 0x02,        //   Usage (Vendor 2)
0x15, 0x00,        //   Logical Minimum (0)
0x26, 0xFF, 0x00,  //   Logical Maximum (255)
0x75, 0x08,        //   Report Size (8 bits)
0x95, 0x08,        //   Report Count (8 bytes)
0x81, 0x02,        //   Input (Data,Var,Abs)
0x09, 0x03,        //   Usage (Vendor 3)
0x91, 0x02,        //   Output (Data,Var,Abs)
0xC0               // End Collection</textarea>
                
                <div class="troubleshooting">
                    <h3><i class="fas fa-tools"></i> 发送失败常见原因</h3>
                    <ul>
                        <li>报告长度与设备要求不匹配</li>
                        <li>报告ID设置错误</li>
                        <li>设备未准备好接收数据</li>
                        <li>权限问题（尝试重新连接）</li>
                        <li>设备端未正确处理自定义协议</li>
                    </ul>
                </div>
            </div>
            
            <div class="panel">
                <h2 class="panel-title"><i class="fas fa-signal"></i> 数据接收</h2>
                <div class="received-data" id="received-data">
等待接收数据...
                </div>
                
                <div class="code-block">
// 接收数据格式示例:
// [ReportID] [DATA1] [DATA2] ... [DATAn]
//
// 示例数据包:
// 01 A1 B2 C3 D4 E5 F6 00 FF
                </div>
                
                <div class="error-details" id="error-details">
                    <!-- 错误详情将显示在这里 -->
                </div>
            </div>
        </div>
        
        <div class="footer">
            <p>基于 WebHID API 技术 | 仅支持 Chrome 89+ 或 Edge 89+ 浏览器</p>
            <p>注意：首次连接需要用户授权，请确保您的设备支持HID协议</p>
            <p>
                <span id="gh-pages-link"></span>
            </p>
        </div>
    </div>
    
    <div id="notification" class="notification"></div>

    <script>
        // 全局变量
        let device = null;
        let receivedData = '';
        let reportLength = 8; // 默认报告长度
        
        // DOM元素
        const connectBtn = document.getElementById('connect-btn');
        const disconnectBtn = document.getElementById('disconnect-btn');
        const refreshBtn = document.getElementById('refresh-btn');
        const sendBtn = document.getElementById('send-btn');
        const clearBtn = document.getElementById('clear-btn');
        const testBtn = document.getElementById('test-btn');
        const connectionStatus = document.getElementById('connection-status');
        const deviceName = document.getElementById('device-name');
        const vendorId = document.getElementById('vendor-id');
        const productId = document.getElementById('product-id');
        const statusText = document.getElementById('status-text');
        const statusDot = document.getElementById('status-dot');
        const receivedDataElement = document.getElementById('received-data');
        const historyContainer = document.getElementById('history-container');
        const notification = document.getElementById('notification');
        const errorDetails = document.getElementById('error-details');
        const dataSizeInput = document.getElementById('data-size');
        
        // 检查浏览器是否支持WebHID
        if (!navigator.hid) {
            statusText.textContent = "错误：您的浏览器不支持WebHID API。请使用Chrome 89+或Edge 89+。";
            statusDot.classList.add('status-disconnected');
            connectBtn.disabled = true;
            refreshBtn.disabled = true;
        }
        
        // 更新报告长度
        dataSizeInput.addEventListener('change', () => {
            reportLength = parseInt(dataSizeInput.value) || 8;
            document.getElementById('command-data').placeholder = 
                `输入 ${reportLength} 字节十六进制数据 (例如: ${Array.from({length: reportLength}, () => 'AA').join(' ')})`;
        });
        
        // 连接设备
        connectBtn.addEventListener('click', async () => {
            try {
                showNotification('正在请求设备访问权限...', 'pending');
                updateStatus('正在连接...', 'pending');
                errorDetails.innerHTML = '';
                
                const filters = [];
                const devices = await navigator.hid.requestDevice({ filters });
                
                if (devices.length === 0) {
                    showNotification('未选择设备', 'warning');
                    updateStatus('未选择设备', 'disconnected');
                    return;
                }
                
                device = devices[0];
                await device.open();
                
                // 更新设备信息
                connectionStatus.textContent = '已连接';
                deviceName.textContent = device.productName || '未知设备';
                vendorId.textContent = '0x' + device.vendorId.toString(16).toUpperCase();
                productId.textContent = '0x' + device.productId.toString(16).toUpperCase();
                
                // 设置接收数据监听器
                device.addEventListener('inputreport', handleInputReport);
                
                // 获取输出报告长度
                if (device.collections && device.collections.length > 0) {
                    const outputReports = device.collections.flatMap(c => c.outputReports || []);
                    if (outputReports.length > 0) {
                        const report = outputReports[0];
                        if (report.items) {
                            const dataItems = report.items.filter(item => item.kind === 'data');
                            if (dataItems.length > 0) {
                                const totalBits = dataItems.reduce((sum, item) => sum + (item.reportSize || 0) * (item.reportCount || 0), 0);
                                const reportBytes = Math.ceil(totalBits / 8);
                                if (reportBytes > 0) {
                                    reportLength = reportBytes;
                                    dataSizeInput.value = reportBytes;
                                    showNotification(`检测到报告长度: ${reportBytes} 字节`, 'success');
                                }
                            }
                        }
                    }
                }
                
                showNotification(`已连接: ${device.productName || 'HID设备'}`, 'success');
                updateStatus('已连接 - 等待数据...', 'connected');
                
            } catch (error) {
                console.error('连接错误:', error);
                showNotification(`连接失败: ${error.message}`, 'error');
                updateStatus('连接失败', 'disconnected');
                displayErrorDetails(error);
            }
        });
        
        // 刷新设备
        refreshBtn.addEventListener('click', () => {
            if (device) {
                device.close();
                device = null;
            }
            
            connectionStatus.textContent = '未连接';
            deviceName.textContent = '-';
            vendorId.textContent = '-';
            productId.textContent = '-';
            errorDetails.innerHTML = '';
            
            showNotification('已重置设备状态', 'info');
            updateStatus('准备连接设备...', 'disconnected');
        });
        
        // 断开设备
        disconnectBtn.addEventListener('click', async () => {
            if (!device) return;
            
            try {
                await device.close();
                device = null;
                
                // 重置设备信息
                connectionStatus.textContent = '未连接';
                deviceName.textContent = '-';
                vendorId.textContent = '-';
                productId.textContent = '-';
                
                showNotification('设备已断开', 'info');
                updateStatus('设备已断开', 'disconnected');
                
            } catch (error) {
                console.error('断开连接错误:', error);
                showNotification(`断开连接失败: ${error.message}`, 'error');
                displayErrorDetails(error);
            }
        });
        
        // 发送测试数据
        testBtn.addEventListener('click', () => {
            // 生成测试数据
            const testData = Array.from({length: reportLength}, () => {
                return Math.floor(Math.random() * 256).toString(16).padStart(2, '0').toUpperCase();
            }).join(' ');
            
            document.getElementById('command-data').value = testData;
            showNotification('已生成测试数据', 'info');
        });
        
        // 发送数据
        sendBtn.addEventListener('click', async () => {
            if (!device) {
                showNotification('错误：未连接设备', 'error');
                return;
            }
            
            try {
                const reportId = parseInt(document.getElementById('report-id').value) || 1;
                const hexData = document.getElementById('command-data').value;
                const dataSize = parseInt(document.getElementById('data-size').value) || reportLength;
                
                // 解析十六进制数据
                const dataArray = [];
                const hexParts = hexData.trim().split(/\s+/).filter(part => part.length > 0);
                
                for (const part of hexParts) {
                    // 处理带0x前缀的十六进制
                    let hexValue = part;
                    if (part.toLowerCase().startsWith('0x')) {
                        hexValue = part.substring(2);
                    }
                    
                    // 处理单个字节或双字节
                    if (hexValue.length === 1) {
                        dataArray.push(parseInt(hexValue, 16));
                    } else if (hexValue.length === 2) {
                        dataArray.push(parseInt(hexValue, 16));
                    } else {
                        // 处理多字节（每2个字符一组）
                        for (let i = 0; i < hexValue.length; i += 2) {
                            const byte = hexValue.substring(i, i + 2);
                            if (byte.length > 0) {
                                dataArray.push(parseInt(byte, 16));
                            }
                        }
                    }
                }
                
                // 检查数据长度
                if (dataArray.length > dataSize) {
                    showNotification(`数据过长（${dataArray.length}字节），将被截断`, 'warning');
                    dataArray.length = dataSize;
                } else if (dataArray.length < dataSize) {
                    showNotification(`数据不足（${dataArray.length}字节），将用0填充`, 'warning');
                    while (dataArray.length < dataSize) {
                        dataArray.push(0x00);
                    }
                }
                
                // 准备报告数据 (payload, 不包含reportId)
                const outputData = new Uint8Array(dataArray);
                
                // 发送数据
                await device.sendReport(reportId, outputData);
                
                // 添加到命令历史 (包含报告ID的数据)
                const fullData = new Uint8Array([reportId, ...dataArray]);
                addToHistory(fullData);
                
                showNotification('命令已发送', 'success');
                
            } catch (error) {
                console.error('发送错误:', error);
                showNotification(`发送失败: ${error.message}`, 'error');
                displayErrorDetails(error);
                
                // 提供具体解决方案
                if (error.message.includes('Failed to write the report')) {
                    errorDetails.innerHTML = `
                        <h3><i class="fas fa-exclamation-triangle"></i> 发送失败解决方案</h3>
                        <ul>
                            <li>检查报告ID是否正确（通常为1-255）</li>
                            <li>确保数据长度与设备要求一致</li>
                            <li>尝试重新连接设备</li>
                            <li>检查设备是否处于可接收数据状态</li>
                            <li>验证设备端固件是否正确处理HID输出报告</li>
                        </ul>
                    `;
                }
            }
        });
        
        // 清除数据
        clearBtn.addEventListener('click', () => {
            receivedData = '';
            receivedDataElement.textContent = '数据已清除...';
            historyContainer.innerHTML = '';
            errorDetails.innerHTML = '';
            showNotification('数据记录已清除', 'info');
        });
        
        // 处理接收到的数据
        function handleInputReport(event) {
            const { data, reportId } = event;
            const dataArray = Array.from(new Uint8Array(data.buffer));
            
            // 格式化接收到的数据
            const hexString = dataArray.map(byte => 
                byte.toString(16).padStart(2, '0').toUpperCase()
            ).join(' ');
            
            const timestamp = new Date().toLocaleTimeString();
            
            // 添加到接收数据框
            receivedData = `[${timestamp}] [Report ID: ${reportId}] ${hexString}\n${receivedData}`;
            receivedDataElement.textContent = receivedData;
            
            // 滚动到顶部
            receivedDataElement.scrollTop = 0;
        }
        
        // 添加到命令历史
        function addToHistory(dataArray) {
            const timestamp = new Date().toLocaleTimeString();
            const hexString = Array.from(dataArray).map(byte => 
                byte.toString(16).padStart(2, '0').toUpperCase()
            ).join(' ');
            
            const historyItem = document.createElement('div');
            historyItem.className = 'history-item';
            historyItem.innerHTML = `
                <div class="history-time">${timestamp}</div>
                <div class="history-data">${hexString}</div>
            `;
            
            historyContainer.prepend(historyItem);
            
            // 限制历史记录数量
            if (historyContainer.children.length > 20) {
                historyContainer.removeChild(historyContainer.lastChild);
            }
        }
        
        // 更新状态显示
        function updateStatus(text, status) {
            statusText.textContent = text;
            statusDot.className = 'status-dot';
            
            if (status === 'connected') {
                statusDot.classList.add('status-connected');
            } else if (status === 'disconnected') {
                statusDot.classList.add('status-disconnected');
            } else {
                statusDot.classList.add('status-pending');
            }
        }
        
        // 显示通知
        function showNotification(message, type) {
            notification.textContent = message;
            notification.className = 'notification';
            
            if (type === 'success') {
                notification.classList.add('notification-success');
            } else if (type === 'error') {
                notification.classList.add('notification-error');
            } else if (type === 'warning') {
                notification.classList.add('notification-warning');
            } else {
                // 默认信息样式
            }
            
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }
        
        // 显示错误详情
        function displayErrorDetails(error) {
            errorDetails.innerHTML = `
                <h3><i class="fas fa-bug"></i> 错误详情</h3>
                <div><strong>错误信息:</strong> ${error.message || '未知错误'}</div>
                <div><strong>错误类型:</strong> ${error.name || 'N/A'}</div>
                ${error.stack ? `<div><strong>调用栈:</strong><pre>${error.stack}</pre></div>` : ''}
            `;
        }
        
        // 自动生成 GitHub Pages 访问入口（仅在 GitHub Pages 环境下有效）
        (function() {
            // 检测是否在 github.io 域名下
            if (location.hostname.endsWith('.github.io')) {
                const repo = location.hostname.split('.')[0];
                const url = location.origin + location.pathname.replace(/\/[^\/]*$/, '/');
                document.getElementById('gh-pages-link').innerHTML =
                    `<a href="${url}" target="_blank" style="color:#6c7bff;text-decoration:underline;">
                        当前页面已部署到 GitHub Pages：${url}
                    </a>`;
            } else {
                document.getElementById('gh-pages-link').innerHTML =
                    `部署方法：将本文件命名为 <strong>index.html</strong> 上传到你的 GitHub 仓库，并在仓库设置中启用 Pages 功能。`;
            }
        })();
        
        // 初始状态
        updateStatus('准备连接设备...', 'disconnected');
    </script>
</body>
</html>
